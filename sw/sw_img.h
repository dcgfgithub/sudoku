#ifndef __SW_IMG_H__
#define __SW_IMG_H__
/*
** Module Prefix : swImg
**
** PROLOGUE:
**
** An image is the basic unit of display.
** They are defined as either a portion of a texture, or the entire
** texture itself.
** 
** Images are defined by mapping them from a texture.
** You can map the images by specifying the coordinates of the
** images directly. This is acceptable if the images on the texture
** form a grid where each image has the same dimensions.
**
** Images can also be defined by an array of image frames, where
** each frame describes the position of the image on the texture.
** Normally these frames would be generated by an external tool, using
** input generated from a texture packing tool.
**
** NOTE:
** 
** The preferred method for generating image frames is to use the
** TexturePacker tool to create the texture atlas. From there, generate
** an output file in LibGdx format, and run this file through the
** ptp utility. This generates a source file containing all the image
** frames and functions that allow loading and creating the texture, and
** generating all of the images. It will also generate constants for
** all of the images.
**
*/
#if defined( __cplusplus )
	extern "C" {
#endif


/*
** PREREQUISITES
*/
#include "sw_tex.h"


/*
** DEFINITIONS
*/
typedef unsigned int SWimage;


struct _SW_IMG_FRAME_S
{
	short x; short y;
    short w; short h;
        /* 
        ** The location and size of the image as it appears on the texture.
        ** These values are given in pixels relative to the
        ** top left corner of the texture.
        */
    short ow;
    short oh;
        /* 
        ** The uncropped size of the image.
        ** They are non-zero if the image was cropped before 
        ** being placed on the texture.
        */ 
    short ox;
    short oy;
        /* 
        ** Offset to the top left corner of the cropped image.
        ** These will be non zero if the image was cropped before
        ** being placed on the texture.
        */
    int texture;
};
typedef struct _SW_IMG_FRAME_S SW_IMG_FRAME_S;


/*
** EXPORTED FUNCTIONS
*/
int  swImgInit( void );
void swImgFree( void );

int  swImgGen( int num_images, SWimage * images );
void swImgDel( int num_images, SWimage * images );

void
swImgMap(
        SWimage   image,
        SWtexture texture
        );
        /*
        ** Maps the entire texture as one image.
        */

void
swImgMapGrid(
        int num_images, SWimage * images, SWtexture texture,
        int x, int y,
                 /*
                 ** Top left corner (in pixels) of the first
                 ** image in the grid. The first image is the one
                 ** closest to the top left corner of the texture.
                 */
        int w, int h,
                 /*
                 ** The size (in pixels) of each image.
                 ** Assumes all of the images are the same size.
                 */
        int rows, int cols,
                 /*
                 ** The number of rows and columns in the grid.
                 ** The product of these two values should match the
                 ** value of num_images, or all of the images will
                 ** not be mapped.
                 */
        int row_pad,
        int col_pad
                 /*
                 ** Padding (in pixels) between each consecutive image
                 ** in the grid.
                 */
        );
        /*
        ** Maps images on a texture arranged in an evenly spaced grid.
        ** Returns the number of images mapped, which will differ from
        ** the number requested if the grid size is larger.
        */
        
void
swImgMapFrames(
        int num_images, SWimage * images, SWtexture texture,
        int num_frames, SW_IMG_FRAME_S * pframes
        );
void
swImgMapFrames2(
        int image_count, SWimage * images, SWtexture * textures,
        int frame_count, SW_IMG_FRAME_S * frames
        );
        /*
        ** Maps images from values contained in an array of
        ** SW_IMG_FRAME_S structures. 
        **
        ** Returns the number of images mapped.
        ** Returns the minimum of the values num_images and 
        ** num_frames, if they are different.         
        */
        
void
swImgMapPixels(
        SWimage image, SWtexture texture,
        int x, int y,
        int w, int h,
        void * pbits
        );
        /*
        ** Maps an image on to a texture and copies the passed in pixels
        ** to the texture and the given location.
        */


int       swImgGetWidth           ( SWimage image );
int       swImgGetHeight          ( SWimage image );
int       swImgGetUncroppedWidth  ( SWimage image );
int       swImgGetUncroppedHeight ( SWimage image );
int       swImgGetOffsetX         ( SWimage image );
int       swImgGetOffsetY         ( SWimage image );
SWtexture swImgGetTexture         ( SWimage image );


#if defined( __cplusplus )
		}
#endif

#endif /* __SW_IMG_H__ */



